// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	model "github/mysql-dbmanager/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIController is a mock of IController interface.
type MockIController struct {
	ctrl     *gomock.Controller
	recorder *MockIControllerMockRecorder
}

// MockIControllerMockRecorder is the mock recorder for MockIController.
type MockIControllerMockRecorder struct {
	mock *MockIController
}

// NewMockIController creates a new mock instance.
func NewMockIController(ctrl *gomock.Controller) *MockIController {
	mock := &MockIController{ctrl: ctrl}
	mock.recorder = &MockIControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIController) EXPECT() *MockIControllerMockRecorder {
	return m.recorder
}

// CreateRow mocks base method.
func (m *MockIController) CreateRow(tableName string, newRow model.Row) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRow", tableName, newRow)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRow indicates an expected call of CreateRow.
func (mr *MockIControllerMockRecorder) CreateRow(tableName, newRow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRow", reflect.TypeOf((*MockIController)(nil).CreateRow), tableName, newRow)
}

// DeleteRow mocks base method.
func (m *MockIController) DeleteRow(tableName string, rowId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRow", tableName, rowId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRow indicates an expected call of DeleteRow.
func (mr *MockIControllerMockRecorder) DeleteRow(tableName, rowId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRow", reflect.TypeOf((*MockIController)(nil).DeleteRow), tableName, rowId)
}

// GetRow mocks base method.
func (m *MockIController) GetRow(tableName string, rowId int64) (model.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRow", tableName, rowId)
	ret0, _ := ret[0].(model.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRow indicates an expected call of GetRow.
func (mr *MockIControllerMockRecorder) GetRow(tableName, rowId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRow", reflect.TypeOf((*MockIController)(nil).GetRow), tableName, rowId)
}

// GetRows mocks base method.
func (m *MockIController) GetRows(tableName string, limit, offset int64) ([]model.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRows", tableName, limit, offset)
	ret0, _ := ret[0].([]model.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRows indicates an expected call of GetRows.
func (mr *MockIControllerMockRecorder) GetRows(tableName, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRows", reflect.TypeOf((*MockIController)(nil).GetRows), tableName, limit, offset)
}

// GetTables mocks base method.
func (m *MockIController) GetTables() []model.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTables")
	ret0, _ := ret[0].([]model.Table)
	return ret0
}

// GetTables indicates an expected call of GetTables.
func (mr *MockIControllerMockRecorder) GetTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTables", reflect.TypeOf((*MockIController)(nil).GetTables))
}

// UpdateRow mocks base method.
func (m *MockIController) UpdateRow(tableName string, newRow model.Row) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRow", tableName, newRow)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRow indicates an expected call of UpdateRow.
func (mr *MockIControllerMockRecorder) UpdateRow(tableName, newRow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRow", reflect.TypeOf((*MockIController)(nil).UpdateRow), tableName, newRow)
}
